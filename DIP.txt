-------------------Prac 1----------------------------------
Aim: 2D Linear Convolution, Circular Convolution between 2D matrices

2D Linear Convolution
Example 1:
Code:
clc;
pramod37_x = [4,5,6;7,8,9];
pramod37_h = [1;1;1];
disp(pramod37_x,"pramod37_x=")
disp(pramod37_h,"pramod37_h=")
pramod37_y=conv2(pramod37_x,pramod37_h)
disp(pramod37_y,"2D Linear Convolution result: y=")

Example 2
Code:
clc;
pramod37_x = [1,2,3;4,5,6;7,8,9];
pramod37_h = [1,1;1,1;1,1];
disp(pramod37_x,"pramod37_x=")
disp(pramod37_h,"pramod37_h=")
pramod37_y=conv2(pramod37_x,pramod37_h)
disp(pramod37_y,"2D Linear Convolution result: y=")


2D Circular Convolution
Example 1
Code:
clc;
pramod37_x = [1,2;3,4];
pramod37_h = [5,6;7,8];
disp(pramod37_x,"pramod37_x=")
disp(pramod37_h,"pramod37_h=")
pramod37_X = fft2(pramod37_x)
pramod37_H = fft2(pramod37_h)
Y=pramod37_X.*pramod37_H
pramod37_y = ifft(Y)
disp(pramod37_y,"2D Circular Convolution result: y=")



Example 2
Code:
clc;
pramod37_x = [1,2,3;4,5,6;7,8,9];
pramod37_h = [1,1,1;1,1,1;1,1,1];
disp(pramod37_x,"pramod37_x=")
disp(pramod37_h,"pramod37_h=")
pramod37_X = fft2(pramod37_x)
pramod37_H = fft2(pramod37_h)
Y=pramod37_X.*pramod37_H
pramod37_y = ifft(Y)
disp(pramod37_y,"2D Circular Convolution result: y=")






-------------------Prac 2-----------------------------------
Aim: Circular Convolution expressed as Linear Convolution plus alias
Example 1
Code:
clc;
pramod_x=[1,2;3,4];
pramod_h=[5,6;7,8];
pramod_y=conv2(pramod_x,pramod_h);
pramod_y1=[pramod_y(:,1)+pramod_y(:,$),pramod_y(:,2)];
pramod_y2=[pramod_y1(1,:)+pramod_y1($,:);pramod_y1(2,:)];
disp(pramod_y,"Pramod Joshi 248637 Linear Convolution Result: y=");
disp(pramod_y2,"Circlular COnvolution expressed as Linear Convolution=")



--------------------------PRac 3-----------------------------------

Aim: Linear Cross Correlation of a 2D matrix, Circular Correlation between two signal and
Linear auto correlation of a 2D matrix
A)Linear Cross Correlation
Code:
clc;
pramod_x=[3,1;2,4];
pramod_h1=[1,5;2,3];
pramod_h2=pramod_h1(:,$:-1:1);
pramod_h=pramod_h2($:-1:1,:);
pramod_y=conv2(pramod_x,pramod_h);
disp(pramod_y,"linear Cross Correlation result y=")


Circular Cross Correlation
Code:
clc;
pramod_x=[1,5;2,4];
pramod_h=[3,2;4,1];
pramod_h=pramod_h(:,$:-1:1);
pramod_h=pramod_h($:-1:1,:);
pramod_X=fft2(pramod_x);
pramod_H=fft2(pramod_h);
pramod_Y=pramod_X.*pramod_H;
pramod_y=ifft(pramod_Y);
disp(pramod_y,"Pramod 248637 Circular Correlation result y=")


c)Linear Auto Correlation
Code:
clc;
pramod_x1=[1,1;1,1];
pramod_x2=pramod_x1(:,$:-1:1);
pramod_x2=pramod_x2($:-1:1,:);
pramod_x=conv2(pramod_x1,pramod_x2);
disp(pramod_x,"Pramod 248637 linear auto Correlation x=")


D)Linear Cross Correlation
Code:
clc;
pramod_x=[1,1;1,1];
pramod_h1=[1,2;3,4];
pramod_h2=pramod_h1(:,$:-1:1);
pramod_h=pramod_h2($:-1:1,:);
pramod_y=conv2(pramod_x,pramod_h);
disp(pramod_y,"Pramod 248637 linear Cross Correlation result y=")



----------------------------Prac 4-------------------------------

Aim: Perform DFT pf a 4x4 gray scale image
Code:
clc;
x=[1,1,1,1;1,1,1,1;1,1,1,1;1,1,1,1]
X=fft(x,-1);
disp(X,"X[k]=")


---------------------------Prac 5---------------------------------

Aim: Compute discrete cosine transform. Program to perform KL transform for the given 2D
matrix.
Code:
clear;
clc;
X=[4,3,5,6;4,2,7,7;5,5,6,7];
[m,n]=size(X);
A=[];
E=[]
for i=1:n
A=A+X(:,i);
E=E+X(:,i)*X(:,i)';
end
mx=A/n;
E=E/n;
C=E-mx*mx';
[V,D]=spec(C);
d=diag(D);
[d,i]=gsort(d);
for j=1:length(d)
T(:,j)=V(:,i(j));
end
T=T'
disp(d,'Eigen Values are U=');
disp(T,'The eigen vector matrix T=');
disp(T,'The KL transform basis is=');
for i=1:n
Y(:,i)=T'*X(:,i);
end
disp(Y,'KL transformation of the input matrix Y=')
for i=1:n
x(:,i)=T*Y(:,i);
end
disp(x,'Reconstruct matrix if the given sample matrix X=')

-------------------------------Prac 6-----------------------------

Aim: Brightness enhancement of an image, Contrast Manipulation, image negative.
Install Image Processing and Signal Processing packges and restart scilab.
Run this command on console: atomsRemove(‘scicv’)
Restart scilab
And run code

Brightness Enhancement
Code:
close;
a=imread("C:\Users\admin\Desktop\dog.jpg");
a=rgb2gray(a);
b=double(a)+50;
b=uint8(b);
c=double(a)-50;
c=uint8(c);
figure(1);
imshow(a);
title("Original Image");
figure(2);
imshow(b);
title("Enhanced Image");


Contrast Manipulation
Code:
clc;
close;
a=imread("C:\Users\admin\Desktop\dog.jpg");
a=rgb2gray(a);
b=double(a)*0.5;
b=uint8(b);
c=double(b)*2;
c=uint8(c);
figure(1);
imshow(a);
title("Original Image");
figure(2);
imshow(b);
title("Decreased Contrast");
figure(3);
imshow(c);
title("Increased Contrast");


Image Negative
Code:
clc;
clear;
a=imread("C:\Users\admin\Desktop\dog.jpg");
k=255-double(a);
k=uint8(k);
figure(1);
imshow(a);
title("Original Image");
figure(2);
imshow(k);
title("Negative Image of Original Image");


---------------------------------Prac 7-----------------------------

Aim: Threhsold Operation & Gray Level Slicing
Threshold Operation
Code:
clc;
close;
a = imread("C:\Users\admin\Pictures\download.jpg");
a = rgb2gray(a);
[m n] = size(a);
t = input("Enter threshold parameter: ");
for i = 1:m
for j = 1:n
if(a(i,j)<t)
b(i,j)=0;
else
b(i,j) = 255;
end
end
end
figure(1);
imshow(a);
title("Original Image");
figure(2);
imshow(b);
title("Threshold Image");
xlabel(sprintf("Threhsold Balue is %g",t))


Gray Level Slicing
Code:
clc;
x = imread("C:\Users\admin\Pictures\download.jpg");
x = rgb2gray(x);
y = double(x);
[m,n] = size(y);
L = max(max(x));
a = round(L/2);
b = L;
for i = 1:m
for j = 1:n
if (y(i,j)>=a & y(i,j)<=b)
z(i,j) = L;
else
z(i,j) = 0;
end
end
end
z = uint8(z);
figure(1);
imshow(x);
title("Original Image");
figure(2);
imshow(z);
title("Gray Level Slicing without preserving Background")


----------------------------Prac 8----------------------------

Aim: Image Segmentation
a.Differentiation of Gaussian Function
Code:
clc;
close;
sigma=input("Enter the value of sigma: ")
i = -10:.1:10;
j = -10:.1:10;
r = sqrt(i.*i+j.*j);
y=(1/(sigma^2))*(((r.*r)/sigma^2)-1).*exp(-r.*r/2*sigma^2);
plot(i,y)
legend(sprintf("The sigma value is %g",sigma));
xtitle("Differentiation of Gaussian function")


b. Differentiation of Gaussian Filter Function
Code:
clc;
close;
sigma1=input("Enter the value of sigma1: ")
sigma2=input("Enter the value of sigma2: ")
i = -10:.1:10;
j = -10:.1:10;
r = sqrt(i.*i+j.*j);
y1=(1/(sigma1^2))*(((r.*r)/sigma1^2)-1).*exp(-r.*r/2*sigma1^2);
y2=(1/(sigma2^2))*(((r.*r)/sigma2^2)-1).*exp(-r.*r/2*sigma2^2);
y=y1-y2
plot(i,y)
xtitle("Shape of DOG Filter")



c. Edge detection using different edge detectors
Code:
clc;
close;
a = imread("C:\Users\admin\Desktop\f1.jpg");
a_gray = rgb2gray(a);
c = edge(a_gray, 'sobel');
d = edge(a_gray, 'prewitt');
e = edge(a_gray, 'log');
f = edge(a_gray, 'canny');
imshow(a_gray);
title("Original Image");
figure;
imshow(c);
title("Sobel");
figure;
imshow(d);
title("Prewitt");
figure;
imshow(e);
title("Log");
figure;
imshow(f);
title("Canny");



----------------------------Prac 9---------------------------

Aim: Image Compression
Code:
close;
clear;
clc;
x=[65,75,80,70;72,75,82,68;84,72,62,65;66,68,72,80];
disp(x,"Original Block is x = ");
[ m1 n1 ]=size(x);
blk = input("Enter the block size: ");
for i =1:blk:m1
for j=1:blk:n1
y=x(i:i+(blk-1),j:j+(blk-1));
m=mean(mean(y));
disp(m,"Mean value is m = ");
sig=stdev(y);
disp(sig,"Standard Deviation of the block is = ");
b=y>m;
disp(b,"Binary allocation matrix is B = ");
K = sum(sum(b));
disp(K,"number of ones = ");
if(K~=blk^2)&(K~=0)
ml=m-sig*sqrt(K/((blk^2)-K));
disp(ml,"The value of a = ");
mu=m+sig*sqrt(((blk^2)-K)/K);
disp(mu,"The value of b = ");
x(i:i+(blk-1),j:j+(blk-1))=b*mu+(1-b)*ml;
end
end
end
disp(round(x),"Reconstructed blkc is x = ");


-------------------------------Prac 10--------------------------

Aim: Binary Image Processing and Color Image Processing
Dilatoin and erosion process
Code:
close;
clear;
clc;
a=imread("C:\Users\admin\Desktop\dog.jpg");
b=imcreatese('rect',7,7);
a1=imdilate(a,b);
a2=imerode(a,b);
figure(1);
imshow(a);
title("Original Image");
figure(2);
imshow(a1);
title("Dilated Image");
figure(3);
imshow(a2);
title("Eroded Image");


Opening and closing operatin on the image
Code:
close;
clear;
clc;
a=imread("C:\Users\admin\Desktop\digit.png");
b=imcreatese('rect',7,7);
a1=imopen(a,b);
a2=imclose(a,b);
figure(1);
imshow(a);
title("Original Image");
figure(2);
imshow(a1);
title("Opened Image");
figure(3);
imshow(a2);
title("Closed Image");


Read an RGB image and extract the three colour components red, green and blue
Code:
close;
clear;
clc;
RGB=imread("C:\Users\admin\Desktop\f1.jpg");
R = RGB;
G = RGB;
B = RGB;
R(:,:,2) = 0;
R(:,:,3) = 0;
G(:,:,1) = 0;
G(:,:,3) = 0;
B(:,:,1) = 0;
B(:,:,2) = 0;
figure(1);
imshow(RGB);
title("Original Color Image");
figure(2);
imshow(R);
title("Red Component");
figure(3);
imshow(G);
title("Green Component");
figure(4);
imshow(B);
title("Blue Component")



Read a Color image and separate the color image into red green and blue planes
Code:
close;
clear;
clc;
RGB=imread("C:\Users\admin\Desktop\f1.jpg");
R = RGB;
G = RGB;
B = RGB;
R(:,:,1) = 0;
G(:,:,2) = 0;
B(:,:,3) = 0;
figure(1);
imshow(RGB);
title("Original Color Image");
figure(2);
imshow(R);
title("Red Component Missing");
figure(3);
imshow(G);
title("Green Component Missing");
figure(4);
imshow(B);
title("Blue Component Missing")


-------------------------Prac 11----------------------------------

Aim: Image Arithmetic
Image Addition
Code:
clc;
clear;
a=imread("C:\Users\admin\Desktop\dog.jpg");
b=imread("C:\Users\admin\Desktop\f1.jpg");
a = imresize(a, [256, 256]);
b = imresize(b, [256, 256]);
c = imadd(a,b);
figure(1);
imshow(a);
title("Image 1");
figure(1);
imshow(b);
title("Image 2");
figure(3);
imshow(c);
title("Added Image");


Image Subtraction
Code:
clc;
clear;
a=imread("C:\Users\admin\Desktop\dog.jpg");
b=imread("C:\Users\admin\Desktop\f1.jpg");
a = imresize(a, [256, 256]);
b = imresize(b, [256, 256]);
c = a-b;

figure(1);
imshow(a);
title("Image 1");
figure(2);
imshow(b);
title("Image 2");
figure(3);
imshow(c);
title("Added Image");


Image multiplication
Code:
clc;
clear;
a=imread("C:\Users\admin\Desktop\dog.jpg");
b=imread("C:\Users\admin\Desktop\f1.jpg");
a = imresize(a, [256, 256]);
b = imresize(b, [256, 256]);
c = a.*b;

figure(1);
imshow(a);
title("Image 1");
figure(2);
imshow(b);
title("Image 2");
figure(3);
imshow(c);
title("Added Image");



Image Division
Code:
clc;
clear;
a=imread("C:\Users\admin\Desktop\dog.jpg");
b=imread("C:\Users\admin\Desktop\f1.jpg");
a = imresize(a, [256, 256]);
b = imresize(b, [256, 256]);
c = a./b;

figure(1);
imshow(a);
title("Image 1");
figure(2);
imshow(b);
title("Image 2");
figure(3);
imshow(c);
title("Added Image");